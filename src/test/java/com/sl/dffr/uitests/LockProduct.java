package com.sl.dffr.uitests;

import java.util.List;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.pages.LandingPage;
import com.pages.LockProductPage;
import com.testplan.BaseTest;
import com.utilfactory.DatabaseHelpers;
import com.utilfactory.DffrHelpers;

public class LockProduct extends BaseTest {

	@Test(enabled = true, description = "ADFFR-210 : Automation: Verify that as a buyer, I should be able to lock a product for a selected period.")
	public void ADFFR_935() throws Exception {
		List<Integer> randomVolumeList = DffrHelpers.generateRandomNumberList(13);

		LandingPage landing = (LandingPage) getPageObject("LandingPage" );
		landing.searchProduct(productCode);

		Assert.assertEquals(true, landing.getLockProductButtonStatus());

		for (int i = 0; i < monthsToEdit; i++) {
			landing.openEditPopUp(i);
			landing.editByAbsoluteVolume(randomVolumeList.get(i));
			landing.saveEditPopUp();
		}

		landing.saveVersion();
		Assert.assertEquals(true, landing.getLockProductButtonStatus());

		landing.selectVersion(1);

		String selectedVersion = landing.getSelectedVersion();
		selectedVersion = selectedVersion.substring(0, 13);

		Assert.assertEquals(selectedVersion, "AutoGenerated");
		Assert.assertEquals(landing.isForecastEditable(0), false);
		Assert.assertEquals(false, landing.getLockProductButtonStatus());

		landing.selectVersion(0);

		selectedVersion = landing.getSelectedVersion();
		selectedVersion = selectedVersion.substring(0, 2);

		Assert.assertEquals(selectedVersion, "V1");
		Assert.assertEquals(landing.isForecastEditable(0), true);
		Assert.assertEquals(true, landing.getLockProductButtonStatus());

		LockProductPage lock = landing.lockProduct();
		Assert.assertEquals(lock.isLockProductPopUpDisplayed(), true);

		String productDesc_UI = lock.getProductDesc();
		String buyer_UI = lock.getBuyer();
		String version_UI = lock.getVersion();

		SQL = "Select * from Product where ProductId = (Select ProductId from Product where ProductCode = "
				+ productCode + ")";
		String productDesc_DB = productCode + " - " + DatabaseHelpers.select(SQL, "Description");

		SQL = "select * from Employee where EmployeeId = (select BuyingDirectorId from ProductBuyers where ProductId=(select ProductId from Product where productCode = "
				+ productCode + "))";
		String buyer_DB = DatabaseHelpers.select(SQL, "FirstName") + " " + DatabaseHelpers.select(SQL, "LastName");

		SQL = "select * from MonthlyForecastVersion where ProductId = (select ProductId from Product where ProductCode = "
				+ productCode + ")";
		String version_DB = "V1-" + DatabaseHelpers.select(SQL, "VersionDesc");

		Assert.assertEquals(productDesc_UI.trim(), productDesc_DB.trim());
		Assert.assertEquals(buyer_UI, buyer_DB);
		Assert.assertEquals(version_UI, version_DB);
		Assert.assertEquals(lock.getLoadReportButtonStatus(), false);

		lock.loadReport("2020", "Feb", "16", "2020", "Mar", "20");

		String startDate = "02-16-2020";
		String endDate = "03-20-2020";
		String loadReportSummary_UI = lock.getLoadReportSummary();

		SQL = "Select * from Product where ProductId = (Select ProductId from Product where ProductCode = "
				+ productCode + ")";

		String loadReportSummary_DB = "Forecast Units for " + productCode + " ("
				+ DatabaseHelpers.select(SQL, "Description") + ") for " + startDate + " to " + endDate;
		Assert.assertEquals(loadReportSummary_UI, loadReportSummary_DB);

		lock.lockProductAndClose();

		Thread.sleep(3000);

		selectedVersion = landing.getSelectedVersion();
		selectedVersion = selectedVersion.substring(0, 9);

		Assert.assertEquals(selectedVersion, "LockedVer");
		Assert.assertEquals(landing.getUnlockButtonStatus(), true);
		Assert.assertEquals(landing.getSendToSupplierButtonStatus(), true);

		landing.selectVersion(1);
		selectedVersion = landing.getSelectedVersion();
		selectedVersion = selectedVersion.substring(0, 2);

		Assert.assertEquals(selectedVersion, "V1");
		Assert.assertEquals(landing.isForecastEditable(0), false);

		landing.selectVersion(2);
		selectedVersion = landing.getSelectedVersion();
		selectedVersion = selectedVersion.substring(0, 13);

		Assert.assertEquals(selectedVersion, "AutoGenerated");
		Assert.assertEquals(landing.isForecastEditable(0), false);

	}

	@Test(enabled = true, description = "ADFFR-211 : As a Buyer, I should be able to unlock a product, searched using product code ")
	public void ADFFR_1066() throws Exception
	{
		LandingPage landing = (LandingPage) getPageObject("LandingPage");
		landing.searchProduct(productCode);
		LockProductPage lock = landing.lockProduct();
		lock.loadReport("2020", "Feb", "16", "2020", "Mar", "20");
		lock.lockProductAndClose();

		landing.unLockProduct();
		Assert.assertEquals(true, landing.getLockProductButtonStatus());

		// To check if unlock version is created, Lock button is visible, forecast is
		// editable
		landing.selectVersion(0);
		String selectedVersion = landing.getSelectedVersion();
		selectedVersion = selectedVersion.substring(0, 2);
		Assert.assertEquals(selectedVersion, "V1");
		Assert.assertEquals(landing.isForecastEditable(0), true);
		Assert.assertEquals(true, landing.getLockProductButtonStatus());

		// To check if locked version is available and supplier letter can be sent for this locked version
		landing.selectVersion(1);
		Thread.sleep(2000);
		selectedVersion = landing.getSelectedVersion();
		selectedVersion = selectedVersion.substring(0, 9);
		Assert.assertEquals(selectedVersion, "LockedVer");
		Assert.assertEquals(landing.isForecastEditable(0), false);
		Assert.assertEquals(true, landing.getSendToSupplierButtonStatus());

	}

}
